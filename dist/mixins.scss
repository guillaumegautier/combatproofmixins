// combatproof mixins 1.5.3;

%clearfix {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
	* zoom: 1;
}
@mixin clearfix {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
	* zoom: 1;
}

@mixin appearance($appearance: none){
	-webkit-appearance: $appearance;
	-moz-appearance: $appearance;
	&:-moz-focusring {
		color: transparent;
		text-shadow: 0 0 0 #000;
	}
}

@mixin border-radius($radius: 3px){
	border-radius: $radius;
}

@mixin box-sizing($box-sizing: border-box){
	-webkit-box-sizing: $box-sizing;
	-moz-box-sizing: $box-sizing;
	box-sizing: $box-sizing;
}

@mixin box-shadow($values:0 1px 2px black){
	-webkit-box-shadow: $values;
	-moz-box-shadow: $values;
	box-shadow: $values;
}

@mixin column-count($count){
	-webkit-column-count: $count;
	-moz-column-count: $count;
	column-count: $count;
}

@mixin column-gap($gap){
	-webkit-column-gap: $gap;
	-moz-column-gap: $gap;
	column-gap: $gap;
}

@mixin column-rule($rule){
	-webkit-column-rule: $rule;
	-moz-column-rule: $rule;
	column-rule: $rule;
}

%flex{
	display: -webkit-flex;
	display: flex;
}
@mixin flex{
	display: -webkit-flex;
	display: flex;
}

@mixin flex-flow($value: row wrap){
	-webkit-flex-flow: $value;
	-moz-flex-flow: $value;
	-ms-flex-flow: $value;
	flex-flow: $value;
}

@mixin halo($h-shadow:0, $v-shadow:0, $blur:3px, $color:white){
	-webkit-box-shadow: $h-shadow $v-shadow $blur $color;
	-moz-box-shadow: $h-shadow $v-shadow $blur $color;
	box-shadow: $h-shadow $v-shadow $blur $color;
}

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}

%inline-block {
	display:inline-block;
	*display:inline;
	zoom:1;
}
@mixin inline-block {
	display:inline-block;
	*display:inline;
	zoom:1;
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie);
}

@mixin order($value: 1){
	-webkit-order: $value;
	order: $value;
}

@mixin rbp($media) {
	@if $media == sm {
		@media screen and (max-width: $sm) { @content; }
	}
	@else if $media == md {
		@media screen and (min-width: $sm+1) { @content; }
	}
	@else if $media == lg {
		@media screen and (min-width: $md+1) { @content; }
	}
	@else if $media == xl {
		@media screen and (min-width: $lg+1) { @content; }
	}
}

@function rem($pxval) {

	@if not unitless($pxval) {
		$pxval: strip-units($pxval);
	}

	$base: $em-base;
	@if not unitless($base) {
		$base: strip-units($base);
	}
	@return ($pxval / $base) * 1rem;
}

@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}

@mixin scale($scalex, $scaley) {
	@include transform(scale($scalex, $scaley));
}

@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

%stretch{
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}
@mixin stretch{
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

%text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin thumbnail($width, $height){
	.thumbnail{
		width: $width;height: $height;
		position: relative;
		img{
			@extend stretch;
			max-width: 100%; max-height: 100%;
			margin: auto;
		}
	}
}

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin transform-origin ($origin) {
	-moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}

@mixin transition($properties:all, $time:0.2s, $ease:ease-out){
	-webkit-transition: $properties $time $ease;
	-moz-transition: $properties $time $ease;
	-ms-transition: $properties $time $ease;
	-o-transition: $properties $time $ease;
	transition: $properties $time $ease;
}

@mixin transitions($var...){  
	-webkit-transition: $var;
	-moz-transition: $var;
	-ms-transition: $var;
	-o-transition: $var;
	transition: $var;
}

@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}

@mixin user-select($user-select: none){
	-webkit-user-select: $user-select;
	-moz-user-select: $user-select;
	-ms-user-select: $user-select;
	user-select: $user-select;
}

@mixin vertical-align-ghost{
	&:before{
		content:'';
		display: inline-block;
		height: 100%;
		vertical-align: middle;
	}
	& > * {display: inline-block;vertical-align: middle;}
}

@mixin vertical-align-transform{
	position: relative;
	left: 50%;
	top: 50%;
	-webkit-transform: translate(-50%,-50%);
	-moz-transform: translate(-50%,-50%);
	-ms-transform: translate(-50%,-50%);
	-o-transform: translate(-50%,-50%);
	transform: translate(-50%,-50%);
}